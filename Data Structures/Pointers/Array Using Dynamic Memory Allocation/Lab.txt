TASK-1:
#include<iostream>
using namespace std;

void allocateMemory(int** number,int value);
void deallocateMemory(int** number);

int main()
{
	int **number;
	int value = 0;
	cout << "enter the value to assign: " << endl;
	cin >> value;

	allocateMemory(number, value);
	deallocateMemory(number);
	return 0;
}
void allocateMemory(int** number, int value)
{
	*number = new int;
	**number = value;
}
void deallocateMemory(int** number)
{
	delete *number;
	number = nullptr;
}

TASKâ€“2:
#include <iostream>
using namespace std;

int** allocateArray(int size);
void fillArray(int** arr, int size);
void printArray(int** arr, int size);
void deallocateArray(int** arr, int size);

int main() 
{
	int size;

	cout << "Enter size of the array: ";
	cin >> size;

	int** arr = allocateArray(size);

	fillArray(arr, size);

	cout << "Array values: ";
	printArray(arr, size);

	deallocateArray(arr, size);
	cout << "Memory deallocated." << endl;

	return 0;
}

int** allocateArray(int size) 
{
	int** arr = new int*[size];
	for (int i = 0; i < size; ++i) 
	{
		arr[i] = new int;
	}
	return arr;
}
void fillArray(int** arr, int size) 
{
	cout << "Enter " << size << " integer values: ";
	for (int i = 0; i < size; ++i) 
	{
		cin >> *arr[i];
	}
}

void printArray(int** arr, int size) 
{
	for (int i = 0; i < size; ++i) 
	{
		cout << *arr[i] << " ";
	}
	cout << endl;
}

void deallocateArray(int** arr, int size) 
{
	for (int i = 0; i < size; ++i) 
	{
		delete arr[i];
	}
	delete[] arr;
}

TASK-3:
#include <iostream>
using namespace std;

int** allocate2DArray(int rows, int cols);
void fill2DArray(int** arr, int rows, int cols, int* values);
void print2DArray(int** arr, int rows, int cols);
void deallocate2DArray(int** arr, int rows);

int main() 
{
	int rows, cols;

	cout << "Enter number of rows: ";
	cin >> rows;
	cout << "Enter number of columns: ";
	cin >> cols;

	int** array = allocate2DArray(rows, cols);

	int total_elements = rows * cols;
	int* values = new int[total_elements];
	cout << "Enter " << total_elements << " integer values: ";
	for (int i = 0; i < total_elements; ++i) 
	{
		cin >> values[i];
	}
	fill2DArray(array, rows, cols, values);

	cout << "2D Array:" << endl;
	print2DArray(array, rows, cols);

	deallocate2DArray(array, rows);
	delete[] values;

	cout << "Memory deallocated." << endl;

	return 0;
}
int** allocate2DArray(int rows, int cols) 
{
	int** arr = new int*[rows];
	for (int i = 0; i < rows; ++i) 
	{
		arr[i] = new int[cols];
	}
	return arr;
}
void fill2DArray(int** arr, int rows, int cols, int* values) 
{
	int index = 0;
	for (int i = 0; i < rows; ++i) 
	{
		for (int j = 0; j < cols; ++j) 
		{
			arr[i][j] = values[index++];
		}
	}
}
void print2DArray(int** arr, int rows, int cols) 
{
	for (int i = 0; i < rows; ++i) 
	{
		for (int j = 0; j < cols; ++j) 
		{
			cout << arr[i][j] << " ";
		}
		cout << endl;
	}
}
void deallocate2DArray(int** arr, int rows) 
{
	for (int i = 0; i < rows; ++i) 
	{
		delete[] arr[i];
	}
	delete[] arr;
}

TASK-4:
#include <iostream>
using namespace std;

void modifyArray(int **arr, int size, int valueToAdd);
void printArray(int *arr, int size);
void deallocateArray(int **arr);

int main() 
{
	int size;

	cout << "Enter size of the array: ";
	cin >> size;

	int *arr = new int[size];

	cout << "Enter " << size << " integer values: ";
	for (int i = 0; i < size; ++i) 
	{
		cin >> arr[i];
	}

	int valueToAdd;

	cout << "Enter a value to add to each element: ";
	cin >> valueToAdd;

	modifyArray(&arr, size, valueToAdd);

	cout << "Modified array: ";
	printArray(arr, size);
	cout << endl;

	deallocateArray(&arr);

	cout << "Memory deallocated." << endl;

	return 0;
}

void modifyArray(int **arr, int size, int valueToAdd)
{
	for (int i = 0; i < size; ++i) 
	{
		(*arr)[i] += valueToAdd;
	}
}

void printArray(int *arr, int size) 
{
	for (int i = 0; i < size; ++i) 
	{
		cout << arr[i] << " ";
	}
}

void deallocateArray(int **arr) 
{
	delete[] * arr;
	*arr = nullptr; 
}

TASK-5:
#include <iostream>
using namespace std;

void resizeArray(int*& arr, int& currentSize, int newSize)
{
	int* newArr = new int[newSize];
	for (int i = 0; i < currentSize && i < newSize; ++i)
	{
		newArr[i] = arr[i];
	}
	for (int i = currentSize;i< newSize; ++i)
	{
		cin >> newArr[i];
	}
	delete[] arr;
	arr = newArr;

	currentSize = newSize;
}

void printArray(int* arr, int size)
{
	cout << "Resized array: ";
	for (int i = 0; i < size; ++i)
	{
		cout << arr[i] << " ";
	}
	cout << endl;
}

void deallocateArray(int*& arr)
{
	delete[] arr;
	cout << "Memory deallocated." << endl;
}

int main()
{
	int initialSize, newSize;

	cout << "Enter initial size of the array: ";
	cin >> initialSize;

	int* arr = new int[initialSize];

	cout << "Enter " << initialSize << " integer values: ";
	for (int i = 0; i < initialSize; ++i)
	{
		cin >> arr[i];
	}

	cout << "Enter new size of the array: ";
	cin >> newSize;

	resizeArray(arr, initialSize, newSize);

	int additionalValues = newSize - initialSize;
	if (additionalValues > 0)
	{
		cout << "Enter " << additionalValues << " more integer values: ";
		for (int i = initialSize; i < newSize; ++i)
		{
			cin >> arr[i];
		}
	}

	printArray(arr, newSize);
	deallocateArray(arr);

	return 0;
}

TASK-6:
#include <iostream>
using namespace std;

void swapValues(int **ptr1, int **ptr2) 
{
	int *temp = *ptr1;
	*ptr1 = *ptr2;    
	*ptr2 = temp;        
}

int main() 
{
	int a, b;

	cout << "Enter 1st integer value: ";
	cin >> a;
	cout << "Enter 2nd integer value: ";
	cin >> b;

	int *ptr1 = &a;
	int *ptr2 = &b;

	swapValues(&ptr1, &ptr2);
	cout << "Values after swap: " << *ptr1 << " " << *ptr2 << endl;

	return 0;
}

TASK-7:
#include <iostream>
using namespace std;
char** allocateStringArray(int numStrings) 
{
    char** array = new char*[numStrings];
    return array;
}

void fillStringArray(char** array, int numStrings) 
{
    cin.ignore();
    for (int i = 0; i < numStrings; ++i) 
    {
        cout << "Enter string " << i + 1 << ": ";
        array[i] = new char[100]; 
        cin.getline(array[i], 100);
    }
}

void printStringArray(char** array, int numStrings) 
{
    cout << "String array: ";
    for (int i = 0; i < numStrings; ++i) 
    {
        cout << array[i] << " ";
    }
    cout << endl;
}

void deallocateStringArray(char** array, int numStrings) 
{
    for (int i = 0; i < numStrings; ++i) 
    {
        delete[] array[i];
    }
    delete[] array;
    cout << "Memory deallocated." << endl;
}

int main() 
 {
    int numStrings;
    cout << "Enter number of strings: ";
    cin >> numStrings;
    char** stringArray = allocateStringArray(numStrings);

    fillStringArray(stringArray, numStrings);

    printStringArray(stringArray, numStrings);

    deallocateStringArray(stringArray, numStrings);

    return 0;
}
TASK-8:
#include <iostream>
using namespace std;

void reverseArray(int **arr, int size);
void printArray(int *arr, int size);
void deallocateArray(int **arr);

int main()
{
	int size;


	cout << "Enter size of the array: ";
	cin >> size;

	int *arr = new int[size];


	cout << "Enter " << size << " integer values: ";
	for (int i = 0; i < size; ++i) {
		cin >> arr[i];
	}

	int *arrPtr = arr;
	reverseArray(&arrPtr, size);


	cout << "Reversed array:";
	printArray(arr, size);

	
	deallocateArray(&arr);

	cout << "Memory deallocated." << endl;

	return 0;
}

void reverseArray(int **arr, int size) {
	int *start = *arr;
	int *end = *arr + size - 1;

	while (start < end) 
	{
	
		int temp = *start;
		*start = *end;
		*end = temp;

		start++;
		end--;
	}
}

void printArray(int *arr, int size) {
	for (int i = 0; i < size; ++i) {
		cout << " " << arr[i];
	}
	cout << endl;
}

void deallocateArray(int **arr) 
{
	delete[] * arr;
	*arr = nullptr;
}

TASK-9:
#include <iostream>
using namespace std;

int** allocate2DArray(int rows, int cols) 
{
	int** arr = new int*[rows];
	for (int i = 0; i < rows; ++i) 
	{
		arr[i] = new int[cols];
	}
	return arr;
}

void deallocate2DArray(int** arr, int rows) 
{
	for (int i = 0; i < rows; ++i) 
	{
		delete[] arr[i];
	}
	delete[] arr;
}

int sum2DArray(int** arr, int rows, int cols) 
{
	int sum = 0;
	for (int i = 0; i < rows; ++i) 
	{
		for (int j = 0; j < cols; ++j) 
		{
			sum += arr[i][j];
		}
	}
	return sum;
}

int main() 
{
	int rows, cols;

	cout << "Enter number of rows: ";
	cin >> rows;

	cout << "Enter number of columns: ";
	cin >> cols;

	int** arr = allocate2DArray(rows, cols);

	cout << "Enter " << rows * cols << " integer values: ";
	for (int i = 0; i < rows; ++i) 
	{
		for (int j = 0; j < cols; ++j) 
		{
			std::cin >> arr[i][j];
		}
	}

	int arraySum = sum2DArray(arr, rows, cols);

	cout << "Sum of 2D array elements: " << arraySum << endl;

	deallocate2DArray(arr, rows);
	cout << "Memory deallocated." << endl;

	return 0;
}

TASK-10:
#include <iostream>
using namespace std;

void allocateStructArray(int** &records, int numRecords) 
{
    records = new int*[numRecords];
    for (int i = 0; i < numRecords; ++i) 
    {
        records[i] = new int[2]; // Each record has two fields: name (as char array) and age
    }
}

void fillStructArray(int** records, int numRecords) 
{
    for (int i = 0; i < numRecords; ++i) 
    {
        cout << "Enter name and age for record " << i + 1 << ": ";
        cin >> records[i][0] >> records[i][1];
    }
}

void printStructArray(int** records, int numRecords) 
{
    cout << "Records:" << endl;
    for (int i = 0; i < numRecords; ++i) 
    {
        cout << "Name: " << records[i][0] << ", Age: " << records[i][1] << endl;
    }
}

void deallocateStructArray(int** &records, int numRecords) 
{
    for (int i = 0; i < numRecords; ++i) 
    {
        delete[] records[i];
    }
    delete[] records;
    records = nullptr;
}

int main() 
{
    int numRecords;
    cout << "Enter number of records: ";
    cin >> numRecords;

    int** records = nullptr;

    allocateStructArray(records, numRecords);
    fillStructArray(records, numRecords);
    printStructArray(records, numRecords);
    deallocateStructArray(records, numRecords);

    cout << "Memory deallocated." << endl;

    return 0;
}
