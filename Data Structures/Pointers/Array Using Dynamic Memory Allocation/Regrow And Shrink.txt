TASK-1:
#include <iostream>
using namespace std;

void regrowIntArray();

int main() 
{
	regrowIntArray();
	return 0;
}
void regrowIntArray()
{
	int size1;
	cout << "Enter size1: ";
	cin >> size1;

	int* originalArray = new int[size1];
	cout << "Enter original array elements: ";
	for (int i = 0; i < size1; i++)
	{
		cin >> originalArray[i];
	}

	int newSize;
	cout << "Array size for regrow array: ";
	cin >> newSize;

	int* regrowArray = new int[newSize];
	for (int i = 0; i < size1; i++)
	{
		regrowArray[i] = originalArray[i];
	}

	for (int i = size1; i < newSize; i++)
	{
		cout << "Enter array element for regrow: " << endl;
		cin >> regrowArray[i];
	}

	delete[] originalArray;
	originalArray = nullptr;

	cout << "Regrown array is : ";
	for (int i = 0; i < newSize; i++)
	{
		cout << regrowArray[i] << " ";
	}
	cout << endl;

	delete[] regrowArray;
	regrowArray = nullptr;
}
TASK2:
#include <iostream>
using namespace std;

void shrinkIntArray();

int main() 
{
	shrinkIntArray();
	return 0;
}
void shrinkIntArray()
{
	int originalSize;
	cout << "Original array size: ";
	cin >> originalSize;

	int* originalArray = new int[originalSize];
	cout << "Original array elements: ";
	for (int i = 0; i < originalSize; i++) 
	{
		cin >> originalArray[i];
	}

	int newSize;
	cout << "Array size for shrunk array: ";
	cin >> newSize;

	if (newSize > originalSize) 
	{
		cout << "Error: new size cannot be larger than original size." << endl;
	}

	else
	{
		int* shrunkArray = new int[newSize];
		for (int i = 0; i < newSize; i++)
		{
			shrunkArray[i] = originalArray[i];
		}

		delete[] originalArray;
		originalArray = shrunkArray;

		cout << "Array elements for shrunk array: ";
		for (int i = 0; i < newSize; i++)
		{
			cout << originalArray[i] << " ";
		}
	}
	cout << endl;
}

TASK 3:
#include <iostream>
using namespace std;

void regrowcharArray();

int main()
{
	regrowcharArray();
	return 0;
}
void regrowcharArray()
{
	int size1;
	cout << "Enter size1: ";
	cin >> size1;

	char* originalArray = new char[size1];
	cout << "Enter original array elements: ";
	for (int i = 0; i < size1; i++)
	{
		cin >> originalArray[i];
	}

	int newSize;
	cout << "Array size for regrow array: ";
	cin >> newSize;

	char* regrowArray = new char[newSize];
	for (int i = 0; i < size1; i++)
	{
		regrowArray[i] = originalArray[i];
	}

	for (int i = size1; i < newSize; i++)
	{
		cout << "Enter array element for regrow: " << endl;
		cin >> regrowArray[i];
	}

	delete[] originalArray;
	originalArray = nullptr;

	cout << "Regrown array is : ";
	for (int i = 0; i < newSize; i++)
	{
		cout << regrowArray[i] << " ";
	}
	cout << endl;

	delete[] regrowArray;
	regrowArray = nullptr;
}
TASK 4:
#include <iostream>
using namespace std;

void shrinkcharArray();

int main()
{
	shrinkcharArray();
	return 0;
}
void shrinkcharArray()
{
	int originalSize;
	cout << "Original array size: ";
	cin >> originalSize;

	char* originalArray = new char[originalSize];
	cout << "Original array elements: ";
	for (int i = 0; i < originalSize; i++)
	{
		cin >> originalArray[i];
	}

	int newSize;
	cout << "Array size for shrunk array: ";
	cin >> newSize;

	if (newSize > originalSize)
	{
		cout << "Error: new size cannot be larger than original size." << endl;
	}

	else
	{
		char* shrunkArray = new char[newSize];
		for (int i = 0; i < newSize; i++)
		{
			shrunkArray[i] = originalArray[i];
		}

		delete[] originalArray;
		originalArray = shrunkArray;

		cout << "Array elements for shrunk array: ";
		for (int i = 0; i < newSize; i++)
		{
			cout << originalArray[i] << " ";
		}
	}
	cout << endl;
}
TASK 5:
#include <iostream>
using namespace std;

void displayMarks(int* marks, int size);
double calculateAverage(int* marks, int size);
int findHighestMark(int* marks, int size);
int findLowestMark(int* marks, int size);
void updateMarks(int* marks, int size);

int main() 
{
	int numStudents;
	cout << "Number of students (in start): ";
	cin >> numStudents;

	int* marks = new int[numStudents];
	cout << "Enter student marks: ";
	for (int i = 0; i < numStudents; i++) 
	{
		cin >> marks[i];
	}

	displayMarks(marks, numStudents);
	cout << "Average marks: " << calculateAverage(marks, numStudents) << endl;
	cout << "Highest marks: " << findHighestMark(marks, numStudents) << endl;
	cout << "Lowest marks: " << findLowestMark(marks, numStudents) << endl;

	updateMarks(marks, numStudents);
	cout << "Updated Marks: ";
	displayMarks(marks, numStudents);

	int* newMarks = new int[numStudents + 3];
	for (int i = 0; i < numStudents; i++) 
	{
		newMarks[i] = marks[i];
	}
	delete[] marks;
	marks = newMarks;

	numStudents += 3;
	cout << "Number of students (updated): " << numStudents << endl;
	cout << "Enter student marks for 3 new students: ";
	for (int i = numStudents - 3; i < numStudents; i++) 
	{
		cin >> marks[i];
	}

	displayMarks(marks, numStudents);
	cout << "Average marks: " << calculateAverage(marks, numStudents) << endl;
	cout << "Highest marks: " << findHighestMark(marks, numStudents) << endl;
	cout << "Lowest marks: " << findLowestMark(marks, numStudents) << endl;

	updateMarks(marks, numStudents);
	cout << "Updated Marks: ";
	displayMarks(marks, numStudents);

	delete[] marks;
	return 0;
}
void displayMarks(int* marks, int size)
{
	cout << "Student marks: ";
	for (int i = 0; i < size; i++) 
	{
		cout << marks[i] << " ";
	}
	cout << endl;
}

double calculateAverage(int* marks, int size) 
{
	double sum = 0;
	for (int i = 0; i < size; i++)
	{
		sum += marks[i];
	}
	return sum / size;
}

int findHighestMark(int* marks, int size)
{
	int highest = marks[0];
	for (int i = 1; i < size; i++)
	{
		if (marks[i] > highest)
		{
			highest = marks[i];
		}
	}
	return highest;
}

int findLowestMark(int* marks, int size) 
{
	int lowest = marks[0];
	for (int i = 1; i < size; i++) 
	{
		if (marks[i] < lowest) 
		{
			lowest = marks[i];
		}
	}
	return lowest;
}

void updateMarks(int* marks, int size)
{
	for (int i = 0; i < size; i++)
	{
		marks[i] += 2;
	}
}
